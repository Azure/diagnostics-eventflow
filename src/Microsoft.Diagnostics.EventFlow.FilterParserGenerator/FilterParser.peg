@namespace Microsoft.Diagnostics.EventFlow
@classname FilterParser
@accessibility internal

@using System.Linq
@using Microsoft.Diagnostics.EventFlow.FilterEvaluators

filter <FilterEvaluator>
 = _ exp:orExp _ eof { exp }

orExp <FilterEvaluator> -memoize
  = left:orExp _ "||" _ right:andExp { new AlternativeEvaluator(left, right) }
  / andExp

andExp <FilterEvaluator> -memoize
  = left:andExp _ "&&" _ right:primaryExp { new ConjunctionEvaluator(left, right) }
  / primaryExp

primaryExp <FilterEvaluator>
  = basicExp
  / "(" _ exp:orExp _ ")" { exp }
  / "!" _ "(" _ exp:orExp _ ")" { new NegationEvaluator(exp) }

basicExp <FilterEvaluator>
  = p:property _ o:operator _ v:(value / quotedText) { EventPropertyExpressionEvaluatorFactory.CreateEvaluator(p, o, v) }

property
  = ([A-Za-z] / "_") (letterDigit / "_" / ".")*

operator
  = ">="
  / "<="
  / ">"
  / "<"
  / "=="
  / "!="
  / "~="
  / "&=="

value
  = (letterDigit / "-") (letterDigit / "-" / ":" / ".")*

// Only take the content inside of double quotes as parsed value.
// E.g., "\"quoted\"" -> "quoted"
quotedText
  = '"' (c:( '\\"' / !'"' . )*) '"'
  {{
      var unescapedList = c.Select(str => str == "\\\"" ? "\"" : str);
      return String.Concat(unescapedList);
  }}

letterDigit
  = [A-Za-z0-9]

_
 = [ \t\r\n]*

eof
  = !.